name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggers

jobs:
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Install Playwright
      run: |
        playwright install chromium
        playwright install-deps chromium
      if: runner.os != 'Windows'

    - name: Install Playwright (Windows)
      run: playwright install chromium
      if: runner.os == 'Windows'

    - name: Run unit tests
      run: pytest tests/unit/ -v --cov=openapi_generator --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
      if: matrix.python-version == '3.12' && matrix.os == 'ubuntu-latest'

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        playwright install chromium
        playwright install-deps chromium

    - name: Run integration tests
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        if [ -n "$ANTHROPIC_API_KEY" ]; then
          pytest tests/integration/ -v -m integration
        else
          echo "️ Skipping integration tests - ANTHROPIC_API_KEY not set"
        fi

  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black ruff mypy

    - name: Check code formatting with Black
      run: black --check openapi_generator/ tests/

    - name: Lint with Ruff
      run: ruff check openapi_generator/ tests/

    - name: Type check with mypy
      run: mypy openapi_generator/
      continue-on-error: true  # Don't fail on type errors yet

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check dependencies for vulnerabilities
      run: safety check --json
      continue-on-error: true

    - name: Security scan with Bandit
      run: bandit -r openapi_generator/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload Bandit report
      uses: actions/upload-artifact@v4
      with:
        name: bandit-security-report
        path: bandit-report.json
      if: always()

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Build package
      run: python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-package
        path: dist/
        retention-days: 7

  mcp-test:
    name: Test MCP Server
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Validate MCP server syntax
      run: python -m py_compile mcp_server.py

    - name: Test MCP server imports
      run: python -c "from mcp_server import *; print(' MCP server imports successful')"

  docs:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check README exists
      run: |
        test -f README.md || exit 1
        test -f QUICKSTART.md || exit 1
        test -f MCP_SETUP.md || exit 1

    - name: Check documentation completeness
      run: |
        echo " Checking documentation files..."
        for file in README.md QUICKSTART.md MCP_SETUP.md TESTING.md; do
          if [ -f "$file" ]; then
            echo " $file exists"
          else
            echo " $file missing"
            exit 1
          fi
        done

    - name: Validate Markdown
      uses: DavidAnson/markdownlint-cli2-action@v18
      with:
        globs: '**/*.md'
      continue-on-error: true

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, integration-test, lint, security, build]
    if: always()

    steps:
    - name: Summary
      run: |
        echo "## CI/CD Pipeline Results " >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo " All checks completed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration: ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
